<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | klwang's TechNotes]]></title>
  <link href="http://blog.klwang.info/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.klwang.info/"/>
  <updated>2013-06-23T09:22:55+08:00</updated>
  <id>http://blog.klwang.info/</id>
  <author>
    <name><![CDATA[wklxd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[About strace]]></title>
    <link href="http://blog.klwang.info/about-strace/"/>
    <updated>2013-06-21T00:00:00+08:00</updated>
    <id>http://blog.klwang.info/about-strace</id>
    <content type="html"><![CDATA[<p>作为软件的使用者而非开发者，平时会遇到很多奇怪的问题</p>




<p>这个程序为什么不动呢，它是不是僵死了？它为什么没有按照预想的方式工作？</p>




<p>时至今日，应用程序已经完全和硬件隔离，具体的操作（文件读写，网络访问等）都要使用 syscalls（系统调用）来完成</p>




<p>如果可以跟踪程序使用的syscall，就意味着几乎知道了程序的所有动作，比如</p>




<p><pre>
    open -> read/write                      读写文件
    socket -> connect -> read -> write                      访问网络
    fork -> execve                      衍生子进程
    wait, kill, pipe                        控制子进程
    clock_gettime                       获知系统时间
</pre></p>




<p>这时，我们可以寻求系统自带的调试利器 strace 的帮助</p>




<p><pre>
    strace  跟踪process系统调用或者信号产生的情况
    ltrace  跟踪process调用库函数的情况
</pre></p>




<p>strace和ltrace的使用方式差不多，只是跟踪的范围不一样</p>




<p>0. 基本使用<br />
    
<pre>
    strace command args
</pre></p>




<p>直接使用strace调用具体的程序，会显示程序运行过程中的所有syscall</p>




<p><strong>1. 看看程序正在干什么</strong></p>




<p><pre>
    strace -p pid
</pre></p>




<p>除了基本的使用方式，strace还可以在线调试运行中的程序</p>




<p><em>这时，就能够很容易的知道为啥这个程序会不动呢？ 它是在等待别的资源，还是在勤劳的干活？</em></p>




<p><strong>2. 看看程序在启动的时候打开了什么文件</strong></p>




<p><pre>
    [root@h4-61 tmp]# strace -e read,access ping -c 1 8.8.8.8 > /dev/null
    access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
    read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0) = 832
    read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0) = 832
</pre></p>




<p>strace默认会显示所有的系统调用，有时。我们可能只关心少量的syscall，可以使用 -e 参数来实现</p>




<p>多个syscall使用逗号(,)分割；甚至，可以使用 read=3 来查看使用 3 这个描述符的 read 调用</p>




<p><strong>3. 显示syscall的时间戳</strong></p>




<p><pre>
    [root@h4-61 tmp]# strace -tt -e read,access ping -c 1 8.8.8.8 > /dev/null
    17:59:05.205188 access("/etc/ld.) = -1 ENOENT (No such file or directory)
    17:59:05.205660 read(3, "\177ELF\2\1\) = 832
    17:59:05.205972 read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0) = 832
</pre></p>




<p>有时需要知道syscall发生的时间，可以使用 -t 参数：</p>




<p><em>-t  表示秒</em></p>




<p><em>-tt 表示毫秒</em></p>




<p><em>-T  显示每个系统调用从开始到结束使用的时间</em></p>




<p><strong>4. 控制syscall显示信息的程度</strong></p>




<p><pre>
    [root@h4-61 tmp]# strace -tt -e read,access -s 10 ping -c 1 8.8.8.8 > /dev/null
    17:59:42.831239 access("/etc/ld.) = -1 ENOENT (No such file or directory)
    17:59:42.831660 read(3, "\177ELF\2\1\1\0\0\0"..., 832) = 832
    17:59:42.831967 read(3, "\177ELF\2\1\1\3\0\0"..., 832) = 832
</pre></p>




<p>默认情况下，strace对于每个系统调用只显示32个字符的信息，使用 -s 数字可以改变默认行为</p>




<p>-s 0 表示显示所有的信息</p>




<p><strong>5. 分类查看syscall</strong></p>




<p>除了使用 -e syscallname 查看具体的syscall，我们还可以按照类别产看，如</p>




<p><strong>trace=file</strong></p>




<p><em>显示文件操作   open,stat,chmod,unlink,..</em></p>




<p><pre>
    [root@h4-61 tmp]# strace -e trace=file ping -c 1 8.8.8.8 > /dev/null
    execve("/bin/ping", ["ping", "-c", "1", "8.8.8.8"], [/* 26 vars */]) = 0
    access("/etc/ld.so.prel)      = -1 ENOENT (No such file or directory)
    open("/etc/ld.so.cache", O_RDONLY)      = 3
    open("/lib64/libidn.so.11", O_RDONLY)   = 3
    open("/lib64/libc.so.6", O_RDONLY)      = 3
    open("/usr/lib/locale/locale-archive", O_RDONLY) = 3
</pre></p>




<p><strong>trace=process</strong></p>




<p><em>显示进程操作 fork, wait, and exec </em></p>




<p><pre>
    [root@h4-61 tmp]# strace -e trace=process ping -c 1 8.8.8.8 > /dev/null
    execve("/bin/ping", ["ping", "-c", "1", "8.8) = 0
    arch_prctl(ARCH_SET_FS, 0x7fc9afee4700) = 0
    exit_group(0)  = ?
</pre>
             
<strong>trace=network</strong></p>




<p><em>网络操作相关的syscall</em></p>




<p><pre>
    [root@h4-61 tmp]# strace -e trace=network ping -c 1 8.8.8.8 > /dev/null
    socket(PF_INET, SOCK_RAW, IPPROTO_ICMP) = 3
    socket(PF_INET, SOCK_DGRAM, IPPROTO_IP) = 4
    省略号
    setsockopt(3, SOL_SOCKET, SO_SNDBUF, [324], 4) = 0
    setsockopt(3, SOL_SOCKET, SO_RCVBUF, [65536], 4) = 0
    getsockopt(3, SOL_SOCKET, SO_RCVBUF, [3427721778695372800], [4]) = 0
    setsockopt(3, SOL_SOCKET, SO_TIMESTAMP, [1], 4) = 0
    省略号
</pre></p>




<p><strong>trace=signal</strong></p>




<p><em>信号操作相关的syscall</em></p>




<p><pre>
    [root@h4-61 tmp]# strace -e trace=signal ping -c 1 8.8.8.8 > /dev/null
    rt_sigaction(SIGINT, {0x7f8f4d04da40, [], SA_RESTORER|SA_IN) = 0
    rt_sigaction(SIGALRM, {0x7f8f4d04da40, [], SA_RESTORER|SA_I) = 0
    rt_sigaction(SIGQUIT, {0x7f8f4d04da50, [], SA_RESTORER|SA_INT) = 0
</pre></p>




<p><strong>trace=ipc</strong></p>




<p><em>进程间通信相关的syscall</em></p>




<p><strong>trace=desc</strong></p>




<p><em>文件描述符相关的syscall</em></p>




<p><pre>
    [root@h4-61 tmp]# strace -e trace=desc ping -c 1 8.8.8.8 > /dev/null
    open("/etc/ld.so.cache", O_RDONLY)      = 3
    fstat(3, {st_mode=S_IFREG|0644, st_size=61926, ...}) = 0
    close(3)                                = 0
    open("/lib64/libidn.so.11", O_RDONLY)   = 3
    read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1) = 832
    省略号
    write(1, "\n", 1)                       = 1
    write(1, "--- 8.8.8.8 ping statistics ---\n"..., 146) = 146
</pre></p>




<p><strong>6. 跟踪子进程</strong></p>




<p><pre>
    -f 
</pre></p>




<p>有时候程序会fork出子进程，使用 -f 参数可以跟踪到子进程</p>




<p><strong>7. strace的输出格式</strong>
    
<pre>
    fstat(3, {st_mode=S_IFREG|0644, st_size=61926, ...}) = 0
</pre></p>




<p>每行的syacall格式为， syscall名字，syscall的参数， syscall的返回值</p>




<p><em>如果返回值为 -1 ，则顺带的返回具体的错误说明</em></p>




<p>To be continued ...</p>




<p>参考文档</p>




<p><a href="https://blogs.oracle.com/ksplice/entry/strace_the_sysadmin_s_microscope" target="_blank">strace_the_sysadmin_s_microscope</a></p>




<p><a href="http://www.hokstad.com/5-simple-ways-to-troubleshoot-using-strace" target="_blank">5-simple-ways-to-troubleshoot-using-strace</a></p>




<p><a href="http://linux.die.net/man/1/strace" target="_blank">strace man page</a>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu NO_PUBKEY 故障解决方式]]></title>
    <link href="http://blog.klwang.info/about-ubuntu-no-pubkey-error/"/>
    <updated>2013-06-19T00:00:00+08:00</updated>
    <id>http://blog.klwang.info/about-ubuntu-no-pubkey-error</id>
    <content type="html"><![CDATA[<p>ubuntu在更新源后出现</p>




<p><pre>
    W: GPG 错误：http://ppa.launchpad.net hardy Release: 
    由于没有公钥，无法验证下列签名： NO_PUBKEY 4B82DCA0798F627E
</pre></p>




<p>原因是对应的公钥没有导入</p>




<p>公钥服务器有很多个，常用的有</p>




<p><pre>
    subkeys.pgp.net
    wwwkeys.pgp.net
</pre></p>




<p>如果一个key server找不到需要的公钥，可以考虑换服务器试试</p>




<p>最终的处理办法</p>




<p><pre>
    gpg --keyserver subkeys.pgp.net --recv 798F627E  （4B82DCA0798F627E的后八位）
    gpg --export --armor 798F627E | sudo apt-key add -
</pre></p>




<p>公钥导入后，就可以正常使用源了</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你不知道的bash (特殊字符)]]></title>
    <link href="http://blog.klwang.info/bash-you-don-not-konw-special-character/"/>
    <updated>2013-06-17T00:00:00+08:00</updated>
    <id>http://blog.klwang.info/bash-you-don-not-konw-special-character</id>
    <content type="html"><![CDATA[<p><strong>题记</strong>
<pre>
  使用Linux有四年多了
  曾经有段时间，也静下心来将bash好好的研究了一把，心满意足的感觉自己“会”了
  随着时间的推移，常用的命令就那么几个，渐渐的，知识面逐渐收缩
  再次看到bash资料时，才发现：“原来可以不用这么绕，原来可以这么直接”
  学习就是一个温故知新的过程，技术就是一个在使用过程中逐渐积累的过程
  这篇文档题目为《你不知道的bash》，其实，更确切的讲，应该是《我不知道的bash》
  在”写下来“的过程中，不仅仅梳理了忘记的东西，还顺带的整理了一些bash中的经典用法
  希望以后不要再忘了
</pre></p>




<p><strong>;; </strong></p>




<p><em>双分号,作为case语句的结束符使用</em>，如：
<pre>
  case "$variable" in
     abc)  echo "\$variable = abc" ;;
     xyz)  echo "\$variable = xyz" ;;
  esac
</pre></p>




<p><strong>**</strong></p>




<p><em>双星号，(立方)</em>，如：
<pre>
  # Bash, version 2.02, introduced the "**" exponentiation operator.
     
  let "z=5**3"
  echo "z = $z"   # z = 125
</pre></p>




<p><strong>$?</strong> </p>




<p><em>结束符，可以是一条命令，一个函数，或者脚本自身的退出码</em>
<pre>
  cmd
  if [ $? ne 0 ]; then
      exit 2
  fi
</pre></p>




<p><strong>$$</strong> </p>




<p><em>进程号，表示脚本自身的进程号，经常看到有人使用$$作为随机数</em>，如：
<pre>
  cmd
  ramdom=$$
</pre></p>




<p><strong>$!</strong> </p>




<p><em>上一条命令的pid，经典用法，杀掉超时的前一个作业</em>
<pre>
  possibly_hanging_job & { sleep ${TIMEOUT}; eval 'kill -9 $!' &> /dev/null; }
</pre></p>




<p><strong>$_</strong></p>




<p><em>上一条命令的参数</em></p>




<p><strong>{xxx,yyy,zzz,...}</strong></p>




<p><em>加强扩展</em>，如
<pre>
  cat {file1,file2,file3} > combined_file
  # 将 file1, file2, 和 file3 合并入 combined_file
     
  cp file22.{txt,backup}
  # 将 "file22.txt" 复制为 "file22.backup"
</pre></p>




<p><strong>=~</strong></p>




<p><em>文本判断时的正则表达式</em>， 如：
<pre>
  if [ "$input" =~ "[0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]" ]
      # 引号可要可不要
      # 格式 NNN-NN-NNNN
  then
      echo "Social Security number."
      # Process SSN.
  else
      echo "Not a Social Security number!"
      # Or, ask for corrected input.
  fi
</pre></p>




<p><strong>&></strong></p>




<p><em>重定向，是不是经常使用这种语句</em>：
<pre>
  command > filename 2 >&1
</pre>
其实你还可以这样，将标准输出和错误输出同时定向
<pre>
  command &>filename 
</pre></p>




<p><strong>$*</strong></p>




<p><em>所有的位置参数，看作一个整体来使用，具体操作时 $* 需要用引号(")引起来</em></p>




<p><strong>$@</strong></p>




<p><em>和 $* 相同，但是在具体操作的时候，bash将每个位置参数分开来看</em>，如:
<pre>
  #!/bin/bash</pre></p>




<p>  echo '$*'<br />
  index=1</p>




<p>  for arg in "$*" <br />
  do<br />
    echo "Arg #$index = $arg"<br />
    let "index+=1"<br />
  done</p>




<p>  echo ‘$@’<br />
  index=1</p>




<p>  for arg in "$@"<br />
  do<br />
    echo "Arg #$index = $arg"<br />
    let "index+=1"<br />
  done 
</p>




<p>执行结果如下， 可以看到 $*将所有的参数看作了整体， $@将参数分开对待了：
<pre>
  ./test 1 2 3 4
  $*
  Arg #1 = 1 2 3 4
  $@
  Arg #1 = 1
  Arg #2 = 2
  Arg #3 = 3
  Arg #4 = 4
</pre></p>




<p>to be continue ...</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lvm 实践笔记]]></title>
    <link href="http://blog.klwang.info/about-lvm-skills/"/>
    <updated>2013-06-12T00:00:00+08:00</updated>
    <id>http://blog.klwang.info/about-lvm-skills</id>
    <content type="html"><![CDATA[<p><strong>物理卷</strong></p>




<p>创建物理卷
<pre>
# pvcreate /dev/sdd /dev/sde /dev/sdf
</pre>
  <br />
察看已经存在的物理卷信息</p>




<p><pre>
# pvs               --每行一条，便于脚本调用
# pvdisplay         --显示pv的详细信息
</pre></p>




<p>阻止在物理卷上分配空间 （比如，某个物理磁盘发生了硬件故障，需要移除这个硬盘的时候）</p>




<p><pre>
# pvchange -x n /dev/sdk1
</pre></p>




<p>重新允许在物理卷上分配空间</p>




<p><pre>
# pvchange -x y /dev/sdk1
</pre></p>




<p>移除物理卷（前提，没有卷组使用该pv）     </p>




<p><pre>
# pvremove /dev/ram15
  Labels on physical volume "/dev/ram15" successfully wiped
</pre></p>




<p>替换/移除物理卷</p>




<p><pre>
# pvmove /dev/sdc1 SourcePhysicalVolume     --从SourcePhysicalVolume中移除sdc1
</pre></p>




<p>只移除 sdc1 中 MyLV 逻辑卷上的的数据</p>




<p><pre>
# pvmove -n MyLV /dev/sdc1
</pre></p>




<p><strong>卷组</strong></p>




<p>创建卷组</p>




<p><pre>
# vgcreate vg1 /dev/sdd1 /dev/sde1
</pre></p>




<p>给卷组中加入新的物理卷</p>




<p><pre>
# vgextend vg1 /dev/sdf1
</pre></p>




<p>察看已经存在的卷组信息</p>




<p><pre>
# vgs       --每行一条，便于脚本调用
# vgdisplay --现实vg卷组的详细信息
# vgscan    --重建 /etc/lvm/cache/.cache file cache文件，维护目前的 LVM 设备列表
</pre></p>




<p>系统启动时，会自动运行vgscan命令。如果集群中在一个节点进行了 vgextend 等命令，在其他节点手动运行 vgscan 将是很好的选择</p>




<p>移动物理卷上的数据（适用于替换硬盘时）</p>




<p><pre>
# vgreduce my_volume_group /dev/hda1
</pre>
该命令会将 /dev/hda1 上的数据挪到同卷组内的其他物理卷上</p>




<p>限制卷组中最大的逻辑卷数量</p>




<p><pre>
# vgchange -l 128 /dev/vg00
</pre></p>




<p>将卷组改成闲置状态（维护时使用）</p>




<p><pre>
# vgchange -a n my_volume_group
</pre></p>




<p>重新激活卷组</p>




<p><pre>
# vgchange -a y my_volume_group
</pre></p>




<p>移除卷组（要保证移除的卷组上的逻辑卷都已经移除了）</p>




<p><pre>
# vgremove officevg
  Volume group "officevg" successfully removed
</pre></p>




<p>卷组拆分（将/dev/ram15 从 bigvg 中拆出来组成名为 smallvg 的卷组）</p>




<p><pre>
# vgsplit bigvg smallvg /dev/ram15
  Volume group "smallvg" successfully split from "bigvg"
</pre></p>




<p>卷组合并（前提条件：两个卷组的 extent sizes 必须相同）</p>




<p><pre>
# vgmerge -v databases my_vg
</pre></p>




<p>将 my_vg 合并到 database卷组, -v表示显示详细信息，其中 my_vg 必须处于 inactive 状态， database可以处于active或者inactive状态</p>




<p>卷组改名</p>




<p><pre>
# vgrename /dev/vg02 /dev/my_volume_group
</pre></p>




<p><strong>逻辑卷</strong></p>




<p>创建逻辑卷 </p>




<p><pre>
# lvcreate -L1500 -n testlv testvg          --1500M 默认单位M
# lvcreate -l 60%VG -n mylv testvg          --使用卷组的60%
# lvcreate -l 100%FREE -n yourlv testvg     --使用testvg的全部剩余空间
</pre></p>




<p>创建条带化的逻辑卷</p>




<p><pre>
# lvcreate -L 50G -i2 -I64 -n gfslv vg0     -i表示设备的数量， -I表示条带的大小（KB）
</pre></p>




<p>制定条带化时的详细信息</p>




<p><pre>
# lvcreate -l 100 -i2 -nstripelv testvg /dev/sda1:0-49 /dev/sdb1:50-99
  Using default stripesize 64.00 KB
  Logical volume "stripelv" created
</pre>
表示大小为 100个PE， 其中，使用 sda1 的0-49和 sda2 的 50-99</p>




<p>创建镜像化的逻辑卷</p>




<p><pre>
# lvcreate -L 50G -m1 -n mirrorlv vg0       -- -m表示镜像（复制）的数量
</pre></p>




<p>镜像逻辑卷按照extend来拷贝，默认是512KB，可以使用 -R num M 的方式进行调整</p>




<p>注意：超过1.5T的就不能使用 512K了</p>




<p><strong>拇指定律： 使用2的指数， 3-4T：4M，   5-8T： 8M</strong></p>




<p>使用快照</p>




<p><pre>
# lvcreate --size 100M --snapshot --name snap /dev/vg00/lvol1
</pre></p>




<p>为 /dev/vg00/lvol1 创建名为 snap 的快照，可以用于备份<br />
 
使用merge操作</p>




<p><pre>
# lvconvert --merge vg00/lvol1_snap
</pre></p>




<p>将 lvol1_snap merge回源逻辑卷，回复备份时可以考虑此操作<br />
 
收缩逻辑卷</p>




<p><pre>
# lvreduce -l -3 vg00/lvol1
</pre>
将逻辑卷减少3个PE</p>




<p>修改逻辑卷的权限</p>




<p><pre>
# lvchange -pr vg00/lvol1      --将逻辑卷改为只读模式
# lvchange -prw vg00/lvol1     --将逻辑卷修改为读写模式
</pre></p>




<p>逻辑卷改名</p>




<p><pre>
# lvrename /dev/vg02/lvold /dev/vg02/lvnew
</pre></p>




<p>删除逻辑卷</p>




<p><pre>
# lvremove /dev/vg02/lvol1
</pre></p>




<p>增大逻辑卷</p>




<p>增大到 12G</p>




<p><pre>
# lvextend -L12G /dev/myvg/homevol
lvextend -- extending logical volume "/dev/myvg/homevol" to 12 GB
lvextend -- doing automatic backup of volume group "myvg"
lvextend -- logical volume "/dev/myvg/homevol" successfully extended
</pre></p>




<p>增大1G</p>




<p><pre>
# lvextend -L+1G /dev/myvg/homevol
lvextend -- extending logical volume "/dev/myvg/homevol" to 13 GB
lvextend -- doing automatic backup of volume group "myvg"
lvextend -- logical volume "/dev/myvg/homevol" successfully extended
</pre></p>




<p>将卷组中所有的空闲附加到已经存在的逻辑卷</p>




<p><pre>
lvextend -l +100%FREE /dev/myvg/testlv
  Extending logical volume testlv to 68.59 GB
  Logical volume testlv successfully resized
</pre></p>




<p>收缩逻辑卷</p>




<p><pre>
# lvreduce -l -3 vg00/lvol1
</pre>
收缩3个PE，在收缩卷之前要保证先将里边的文件系统进行收缩，不然会丢失数据</p>




<p>如果数据量较大，需要使用-n参数后台进行，下面的命令表示将 sdc1 上的数据移动到 sdf1</p>




<p><pre>
# pvmove -b /dev/sdc1 /dev/sdf1
</pre></p>




<p><strong>综合操作实例（跨系统的卷组迁移）</strong></p>




<p>1. 卸载卷组上的所有逻辑卷</p>




<p><pre>
umount 
</pre></p>




<p>2. 将卷组改成闲置状态</p>




<p><pre>
vgchange -a n olumeGroupName
</pre></p>




<p>3. 导出VolumeGroupName的信息</p>




<p><pre>
vgexport VolumeGroupName
</pre></p>




<p>4. 做一次重建cache扫描</p>




<p><pre>
vgscan
</pre></p>




<p>5. 察看所有相关物理卷的状态，一定要处于export状态</p>




<p><pre>
pvscan
    PV /dev/sda1
    is in exported VG myvg [17.15 GB / 7.15 GB free]
    PV /dev/sdc1
    is in exported VG myvg [17.15 GB / 15.15 GB free]
    PV /dev/sdd1
    is in exported VG myvg [17.15 GB / 15.15 GB free]
    ...
</pre></p>




<p>6. 拔下硬盘装到新的机器</p>




<p>7. 导入VolumeGroupName的信息</p>




<p><pre>
vgimport VolumeGroupName
</pre></p>




<p>8. 激活卷组</p>




<p><pre>
vgchange -a y VolumeGroupName
</pre></p>




<p>9. 重新挂在相关逻辑卷</p>




<p><pre>
mount
</pre></p>




<p>That's all</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将 resouce angent 改造成 multi state 类型]]></title>
    <link href="http://blog.klwang.info/change-your-resouce-angent-to-multistate/"/>
    <updated>2013-06-10T00:00:00+08:00</updated>
    <id>http://blog.klwang.info/change-your-resouce-angent-to-multistate</id>
    <content type="html"><![CDATA[<p>习惯了资源clone的方便快捷</p>




<p>突然发现，有时候我们需要在这些无差异的clone资源中选出一个来，好做一些“不一样“的事情，</p>




<p>就好像是在一群人中选出一个代表，来做一些领导性的工作一样</p>




<p>怎么样来做到这点呢？</p>




<p>pacemaker提供了多态(multi-state)的概念，除了具备clone的特性外，还多出了</p>




<p>master/slave的概念，可以在资源agent中判断自己所处的角色，然后根据角色的不同，做一些不同的操作</p>




<p>那么，如何将自己的agent改造为 master/slave 的呢？</p>




<p>最简单的思路：在每个节点写一个文件，记录下自己所处的角色好了</p>




<p>有了思路就可以开始实施了，这里完全照搬 pacemaker/Stateful 资源的做法</p>




<p>改造开始</p>




<p>1. 设置 $CRM_MASTER</p>




<p><pre>
    在 # Initialization: 块中加入
    CRM_MASTER="${HA_SBIN_DIR}/crm_master -l reboot"
</pre></p>




<p>2. usage 函数改造[可选]</p>




<p>usage函数本来就是给“人”看的，就算不修改，也不会影响功能。可以加入以下的内容对demote和promote进行说明
<pre>
    The 'promote' operation xxxxxx xxxxxx.
    The 'demote' operation xxx xxxxxx.
</pre></p>




<p>3. meta_data函数处理</p>




<p>加入状态文件的参数
<pre>
<parameter name="state" unique="1">
<longdesc lang="en">
Location to store the resource state in
</longdesc>
<shortdesc lang="en">State file</shortdesc>
<content type="string" default="${HA_VARRUN}/Stateful-{OCF_RESOURCE_INSTANCE}.state" />
</parameter>
</pre></p>




<p>action模块加入monitor的动作</p>




<p><pre>
<action name="monitor" depth="0" timeout="20" interval="30" role="Master" />
<action name="monitor" depth="0" timeout="20" interval="30" role="Slave" />
</pre>
注意，默认timeout相同时， pacemaker会认为两个timeout是一个操作，需要在crm中进行修改</p>




<p>下面是pacemaker对设置不同interval的说明
<pre>
It is crucial that every monitor operation has a different interval!
This is because Pacemaker currently differentiates between operations only 
by resource and interval;
so if eg. a master/slave resource has the same monitor interval for both roles, 
Pacemaker would ignore the role when checking the status - which would 
cause unexpected return codes,and therefore unnecessary complications.
</pre></p>




<p>4. 添加 demote 和 promote 函数</p>




<p><pre>
    stateful_update() {
        echo $1 > ${OCF_RESKEY_state}
    }</pre></p>




<p>    stateful_check_state() {<br />
        target=$1<br />
        if [ -f ${OCF_RESKEY_state} ]; then<br />
            state=`cat ${OCF_RESKEY_state}`<br />
            if [ "x$target" = "x$state" ]; then<br />
                return 0<br />
            fi</p>




<p>        else<br />
            if [ "x$target" = "x" ]; then<br />
                return 0<br />
            fi<br />
        fi</p>




<p>        return 1<br />
    }</p>




<p>    stateful_demote() {<br />
        stateful_check_state<br />
        if [ $? = 0 ]; then<br />
            # CRM Error - Should never happen<br />
            return $OCF_NOT_RUNNING<br />
        fi<br />
        stateful_update "slave"<br />
        $CRM_MASTER -v ${slave_score}<br />
        return $OCF_SUCCESS<br />
    }</p>




<p>    stateful_promote() {<br />
        stateful_check_state<br />
        if [ $? = 0 ]; then<br />
            return $OCF_NOT_RUNNING<br />
        fi<br />
        stateful_update "master"<br />
        $CRM_MASTER -v ${master_score}<br />
        return $OCF_SUCCESS<br />
    }

对于 master/slave 的agent，必须要有 promote 和 demote 函数</p>




<p>5. start 函数改造</p>




<p><pre>
    返回之前添加
    stateful_update "slave"
    $CRM_MASTER -v ${slave_score}
</pre>
标记自己的状态为slave，顺便告诉pacemaker(使用crm_master来实现)</p>




<p><strong>注意：master/slave资源启动的角色必须是 slave， 然后由pacemaker在slave的节点中选择一个promote为master</strong></p>




<p>6 stop 函数改造</p>




<p><pre>
    $CRM_MASTER -D
    stateful_check_state "master"
    if [ $? = 0 ]; then
        # CRM Error - Should never happen
        return $OCF_RUNNING_MASTER
    fi
    if [ -f ${OCF_RESKEY_state} ]; then
        rm ${OCF_RESKEY_state}
    fi
</pre>
在发送停止命令之前，先进行demote操作</p>




<p>7 monitor函数改造</p>




<p>    将返回的 $OCF_SUCCESS 那一行修改为
<pre>
    stateful_check_state "master"
    if [ $? = 0 ]; then
        if [ $OCF_RESKEY_CRM_meta_interval = 0 ]; then
            # Restore the master setting during probes
            $CRM_MASTER -v ${master_score}
        fi
        return $OCF_RUNNING_MASTER
    fi</pre></p>




<p>    stateful_check_state "slave"<br />
    if [ $? = 0 ]; then<br />
        if [ $OCF_RESKEY_CRM_meta_interval = 0 ]; then<br />
            # Restore the master setting during probes<br />
            $CRM_MASTER -v ${slave_score}<br />
        fi<br />
        return $OCF_SUCCESS<br />
    fi</p>




<p>    echo "File '${OCF_RESKEY_state}' exists but contains unexpected contents"<br />
    return $OCF_ERR_GENERIC

pacemaker充分相信agent，它对资源角色的判断完全来自monitor函数，所有只要我们告诉它自己是 $OCF_RUNNING_MASTER， 它就会认为我们是master</p>




<p>8 加入默认值</p>




<p><pre>
: ${slave_score=5}
: ${master_score=10}</pre></p>




<p>: ${OCF_RESKEY_CRM_meta_interval=0}<br />
: ${OCF_RESKEY_CRM_meta_globally_unique:="true"}</p>




<p>if [ "x$OCF_RESKEY_state" = "x" ]; then<br />
    if [ ${OCF_RESKEY_CRM_meta_globally_unique} = "false" ]; then<br />
        state="${HA_VARRUN}/Stateful-${OCF_RESOURCE_INSTANCE}.state"</p>




<p>        # Strip off the trailing clone marker<br />
        OCF_RESKEY_state=`echo $state | sed s/:[0-9][0-9]*\.state/.state/`<br />
    else<br />
        OCF_RESKEY_state="${HA_VARRUN}/Stateful-${OCF_RESOURCE_INSTANCE}.state"<br />
    fi<br />
fi

上面的操作中多次用到了 slave_score 和 master_score 等，现在就对它们进行赋值，要点：只要 master > slave 即可</p>




<p>9 最后，加入动作</p>




<p><pre>
case $1 in</pre></p>




<p>    promote)        stateful_promote<br />
            ;;<br />
    demote)         stateful_demote<br />
            ;;
</p>




<p>好了，agent已经改造完成了，现在展示一下</p>




<p>在pacemaker中的配置如下
<pre>
primitive testklwang ocf:test:klwang \
    op monitor interval="30" role="Master" \
    op monitor interval="29" role="Slave"
</pre></p>




<p>下面是crm_mon的结果：
<pre>
Last updated: Sat Jun  8 12:28:15 2013
Last change: Sat Jun  8 12:28:14 2013 via cibadmin on node1
Stack: cman
Current DC: cent1 - partition with quorum
Version: 1.1.8-7.el6-394e906
5 Nodes configured, 3 expected votes
32 Resources configured.</pre></p>




<p>Online: [ node1 node2 node3 node4 node5 ]</p>




<p> Master/Slave Set: ms_klwang [testklwang]<br />
     Masters: [ node1 ]<br />
     Slaves: [ node2 node3 node4 node5 ]
</p>




<p>现在，我们的目的达到了，已经在集群中选出了一个作为master的节点，下来我们就可以做一些不一样的事情啦</p>




<p><pre>
    stateful_check_state "master"
    if [ $? -eq 0  ]; then
        # 将你想干的事情放在这里
        return $OCF_SUCCESS
    fi
</pre></p>




<p>上面演示中 test:klwang 是使用自带的Dummy示例改造而来，把代码贴出来，也好做个对照
<pre>
#!/bin/sh
#
#
#   Dummy OCF RA. Does nothing but wait a few seconds, can be
#   configured to fail occassionally.
#
# Copyright (c) 2004 SUSE LINUX AG, Lars Marowsky-Brée
#                    All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#</pre></p>




<p>#######################################################################<br />
# Initialization:</p>




<p>: ${OCF_FUNCTIONS=${OCF_ROOT}/resource.d/heartbeat/.ocf-shellfuncs}<br />
. ${OCF_FUNCTIONS}<br />
: ${__OCF_ACTION=$1}<br />
CRM_MASTER="${HA_SBIN_DIR}/crm_master -l reboot"</p>




<p>#######################################################################</p>




<p><p>meta_data() {<br /></p>

<pre><code>cat &lt;&lt;END
</code></pre>

<p>&lt;?xml version=&ldquo;1.0&rdquo;?>
&lt;!DOCTYPE resource-agent SYSTEM &ldquo;ra-api-1.dtd&rdquo;>
&lt;resource-agent name=&ldquo;Dummy&rdquo; version=&ldquo;1.0&rdquo;>
<version>1.0</version>&lt;/resource-agent></p></p>

<p><p><longdesc lang="en">
This is a Dummy Resource Agent. It does absolutely nothing except <br />
keep track of whether its running or not.<br />
Its purpose in life is for testing and to serve as a template for RA writers.</longdesc></p></p>

<p><p>NB: Please pay attention to the timeouts specified in the actions<br />
section below. They should be meaningful for the kind of resource<br />
the agent manages. They should be the minimum advised timeouts,<br />
but they shouldn&rsquo;t/cannot cover <em>all</em> possible resource<br />
instances. So, try to be neither overly generous nor too stingy,<br />
but moderate. The minimum timeouts should never be below 10 seconds.</p>

<p><shortdesc lang="en">Example stateless resource agent</shortdesc></p></p>

<p><p><parameters>
<parameter name="state" unique="1">
<longdesc lang="en">
Location to store the resource state in.
</longdesc>
<shortdesc lang="en">State file</shortdesc>
<content type="string" default="${HA_VARRUN}/Dummy-{OCF_RESOURCE_INSTANCE}.state" />
</parameter></parameters></p></p>

<p><p><parameter name="fake" unique="0">
<longdesc lang="en">
Fake attribute that can be changed to cause a reload
</longdesc>
<shortdesc lang="en">Fake attribute that can be changed to cause a reload</shortdesc>
<content type="string" default="dummy" />
</parameter></p></p>

<p><p><parameter name="op_sleep" unique="1">
<longdesc lang="en">
Number of seconds to sleep during operations.  This can be used to test how<br />
the cluster reacts to operation timeouts.
</longdesc>
<shortdesc lang="en">Operation sleep duration in seconds.</shortdesc>
<content type="string" default="0" />
</parameter></p></p>

<p><p><parameter name="stateful" unique="1">
<longdesc lang="en">
Location to store the resource stateful in
</longdesc>
<shortdesc lang="en">stateful file</shortdesc>
<content type="string" default="${HA_VARRUN}/Dummy-{OCF_RESOURCE_INSTANCE}.stateful" />
</parameter></p></p>

<p><p></p></p>

<p><p><actions>
<action name="start" timeout="20" />
<action name="stop" timeout="20" />
<action name="monitor" depth="0" timeout="20" interval="30" role="Master" />
<action name="monitor" depth="0" timeout="20" interval="30" role="Slave" />
<action name="reload" timeout="20" />
<action name="migrate_to" timeout="20" />
<action name="migrate_from" timeout="20" />
<action name="validate-all" timeout="20" />
<action name="meta-data" timeout="5" />
</actions></p>

<p>END<br />
}</p></p>

<p><p>#######################################################################</p></p>

<p><p># don&rsquo;t exit on TERM, to test that lrmd makes sure that we do exit<br />
trap sigterm_handler TERM<br />
sigterm_handler() {<br /></p>

<pre><code>ocf_log info "They use TERM to bring us down. No such luck."&lt;br /&gt;
return&lt;br /&gt;
</code></pre>

<p>}</p></p>

<p><p>dummy_usage() {<br /></p>

<pre><code>cat &lt;&lt;END&lt;br /&gt;
</code></pre>

<p>usage: $0 {start|stop|monitor|migrate_to|migrate_from|validate-all|meta-data}</p></p>

<p><p>Expects to have a fully populated OCF RA-compliant environment set.<br />
END<br />
}</p></p>

<p><p>stateful_update() {<br /></p>

<pre><code>echo $1 &gt; ${OCF_RESKEY_state}&lt;br /&gt;
</code></pre>

<p>}</p></p>

<p><p>stateful_check_state() {<br /></p>

<pre><code>target=$1&lt;br /&gt;
if [ -f ${OCF_RESKEY_state} ]; then&lt;br /&gt;
    state=`cat ${OCF_RESKEY_state}`&lt;br /&gt;
    if [ "x$target" = "x$state" ]; then&lt;br /&gt;
        return 0&lt;br /&gt;
    fi&lt;/p&gt;
</code></pre>

<p><p> else<br /></p>

<pre><code>    if [ "x$target" = "x" ]; then&lt;br /&gt;
        return 0&lt;br /&gt;
    fi&lt;br /&gt;
fi&lt;/p&gt;
</code></pre>

<p><p> return 1<br />
}</p></p>

<p><p>stateful_demote() {<br /></p>

<pre><code>stateful_check_state&lt;br /&gt;
if [ $? = 0 ]; then&lt;br /&gt;
    # CRM Error - Should never happen&lt;br /&gt;
    return $OCF_NOT_RUNNING&lt;br /&gt;
fi&lt;br /&gt;
stateful_update "slave"&lt;br /&gt;
$CRM_MASTER -v ${slave_score}&lt;br /&gt;
return $OCF_SUCCESS&lt;br /&gt;
</code></pre>

<p>}</p></p>

<p><p>stateful_promote() {<br /></p>

<pre><code>stateful_check_state&lt;br /&gt;
if [ $? = 0 ]; then&lt;br /&gt;
    return $OCF_NOT_RUNNING&lt;br /&gt;
fi&lt;br /&gt;
stateful_update "master"&lt;br /&gt;
$CRM_MASTER -v ${master_score}&lt;br /&gt;
return $OCF_SUCCESS&lt;br /&gt;
</code></pre>

<p>}</p></p>

<p><p>dummy_start() {<br /></p>

<pre><code>dummy_monitor&lt;br /&gt;
if [ $? =  $OCF_SUCCESS ]; then&lt;br /&gt;
    return $OCF_SUCCESS&lt;br /&gt;
fi&lt;br /&gt;
touch ${OCF_RESKEY_state}&lt;br /&gt;
stateful_update "slave"&lt;br /&gt;
$CRM_MASTER -v ${slave_score}&lt;br /&gt;
</code></pre>

<p>}</p></p>

<p><p>dummy_stop() {<br /></p>

<pre><code>dummy_monitor&lt;br /&gt;
if [ $? = $OCF_SUCCESS ]; then&lt;br /&gt;
    $CRM_MASTER -D&lt;br /&gt;
    stateful_check_state "master"&lt;br /&gt;
    if [ $? = 0 ]; then&lt;br /&gt;
        # CRM Error - Should never happen&lt;br /&gt;
        return $OCF_RUNNING_MASTER&lt;br /&gt;
    fi&lt;br /&gt;
    if [ -f ${OCF_RESKEY_state} ]; then&lt;br /&gt;
        rm ${OCF_RESKEY_state}&lt;br /&gt;
    fi&lt;br /&gt;
    rm ${OCF_RESKEY_state}&lt;br /&gt;
fi&lt;br /&gt;
return $OCF_SUCCESS&lt;br /&gt;
</code></pre>

<p>}</p></p>

<p><p>dummy_monitor() {<br /></p>

<pre><code># Monitor _MUST!_ differentiate correctly between running&lt;br /&gt;
# (SUCCESS), failed (ERROR) or _cleanly_ stopped (NOT RUNNING).&lt;br /&gt;
# That is THREE states, not just yes/no.&lt;/p&gt;
</code></pre>

<p><p> sleep ${OCF_RESKEY_op_sleep}<br /></p>

<pre><code>if [ -f ${OCF_RESKEY_state} ]; then&lt;br /&gt;
        stateful_check_state "master"&lt;br /&gt;
        if [ $? = 0 ]; then&lt;br /&gt;
            if [ $OCF_RESKEY_CRM_meta_interval = 0 ]; then&lt;br /&gt;
                # Restore the master setting during probes&lt;br /&gt;
                $CRM_MASTER -v ${master_score}&lt;br /&gt;
            fi&lt;br /&gt;
            return $OCF_RUNNING_MASTER&lt;br /&gt;
        fi&lt;/p&gt;
</code></pre>

<p><p>         stateful_check_state &ldquo;slave&rdquo;<br /></p>

<pre><code>        if [ $? = 0 ]; then&lt;br /&gt;
            if [ $OCF_RESKEY_CRM_meta_interval = 0 ]; then&lt;br /&gt;
                # Restore the master setting during probes&lt;br /&gt;
                $CRM_MASTER -v ${slave_score}&lt;br /&gt;
            fi&lt;br /&gt;
            return $OCF_SUCCESS&lt;br /&gt;
        fi&lt;br /&gt;
    &lt;br /&gt;
        echo "File '${OCF_RESKEY_state}' exists but contains unexpected contents"&lt;br /&gt;
        return $OCF_ERR_GENERIC&lt;br /&gt;
fi&lt;br /&gt;
if false ; then&lt;br /&gt;
    return $OCF_ERR_GENERIC&lt;br /&gt;
fi&lt;br /&gt;
return $OCF_NOT_RUNNING&lt;br /&gt;
</code></pre>

<p>}</p></p>

<p><p>dummy_validate() {<br /></p>

<pre><code>&lt;br /&gt;
# Is the state directory writable? &lt;br /&gt;
state_dir=`dirname "$OCF_RESKEY_state"`&lt;br /&gt;
touch "$state_dir/$$"&lt;br /&gt;
if [ $? != 0 ]; then&lt;br /&gt;
return $OCF_ERR_ARGS&lt;br /&gt;
fi&lt;br /&gt;
rm "$state_dir/$$"&lt;/p&gt;
</code></pre>

<p><p>    return $OCF_SUCCESS<br />
}</p></p>

<p><p>: ${slave_score=5}<br />
: ${master_score=10}<br />
: ${OCF_RESKEY_fake=dummy}<br />
: ${OCF_RESKEY_op_sleep=0}<br />
: ${OCF_RESKEY_CRM_meta_interval=0}<br />
: ${OCF_RESKEY_CRM_meta_globally_unique:=&ldquo;true&rdquo;}</p></p>

<p><p>if [ &ldquo;x$OCF_RESKEY_state&rdquo; = &ldquo;x&rdquo; ]; then<br /></p>

<pre><code>if [ ${OCF_RESKEY_CRM_meta_globally_unique} = "false" ]; then&lt;br /&gt;
state="${HA_VARRUN}/Dummy-${OCF_RESOURCE_INSTANCE}.state"&lt;br /&gt;

# Strip off the trailing clone marker&lt;br /&gt;
OCF_RESKEY_state=`echo $state | sed s/:[0-9][0-9]*\.state/.state/`&lt;br /&gt;
else &lt;br /&gt;
OCF_RESKEY_state="${HA_VARRUN}/Dummy-${OCF_RESOURCE_INSTANCE}.state"&lt;br /&gt;
fi&lt;br /&gt;
</code></pre>

<p>fi</p></p>

<p><p>case $__OCF_ACTION in<br />
meta-data)  meta_data<br /></p>

<pre><code>    exit $OCF_SUCCESS&lt;br /&gt;
    ;;&lt;br /&gt;
</code></pre>

<p>start)      dummy_start;;<br />
stop)       dummy_stop;;<br />
monitor)    dummy_monitor;;<br />
migrate_to) ocf_log info &ldquo;Migrating ${OCF_RESOURCE_INSTANCE} to ${OCF_RESKEY_CRM_meta_migrate_target}.&rdquo;<br /></p>

<pre><code>        dummy_stop&lt;br /&gt;
    ;;&lt;br /&gt;
</code></pre>

<p>migrate_from)   ocf_log info &ldquo;Migrating ${OCF_RESOURCE_INSTANCE} to ${OCF_RESKEY_CRM_meta_migrate_source}.&rdquo;<br /></p>

<pre><code>        dummy_start&lt;br /&gt;
    ;;&lt;br /&gt;
</code></pre>

<p>promote)    stateful_promote<br /></p>

<pre><code>    ;;&lt;br /&gt;
</code></pre>

<p>demote)     stateful_demote<br /></p>

<pre><code>    ;;&lt;/p&gt;
</code></pre>

<p><p>reload)      ocf_log err &ldquo;Reloading&hellip;&rdquo;<br /></p>

<pre><code>        dummy_start&lt;br /&gt;
    ;;&lt;br /&gt;
</code></pre>

<p>validate-all)   dummy_validate;;<br />
usage|help) dummy_usage<br /></p>

<pre><code>    exit $OCF_SUCCESS&lt;br /&gt;
    ;;&lt;br /&gt;
</code></pre>

<p>*)      dummy_usage<br /></p>

<pre><code>    exit $OCF_ERR_UNIMPLEMENTED&lt;br /&gt;
    ;;&lt;br /&gt;
</code></pre>

<p>esac<br />
rc=$?<br />
ocf_log debug &ldquo;${OCF_RESOURCE_INSTANCE} $__OCF_ACTION : $rc&rdquo;<br />
exit $rc
</p></p>

<p><p><strong>申明：本文中大量的代码来自<a href="http://clusterlabs.org/" target="_blank">ClusterLabs</a>， 使用时请遵守相关约束</strong></p></p>
]]></content>
  </entry>
  
</feed>
