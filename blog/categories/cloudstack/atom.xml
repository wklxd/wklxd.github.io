<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cloudstack | My Octopress Blog]]></title>
  <link href="http://github.klwang.info/blog/categories/cloudstack/atom.xml" rel="self"/>
  <link href="http://github.klwang.info/"/>
  <updated>2013-06-23T00:01:53+08:00</updated>
  <id>http://github.klwang.info/</id>
  <author>
    <name><![CDATA[wklxd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ovirt 安装小记]]></title>
    <link href="http://github.klwang.info/blog/ovirt-install-guide-of-klwang/"/>
    <updated>2013-05-28T00:00:00+08:00</updated>
    <id>http://github.klwang.info/blog/ovirt-install-guide-of-klwang</id>
    <content type="html"><![CDATA[<p>出于工作需要，试了一把Ovirt, 发现其和cloudstack、openstack这种大家伙还是有差距的，不过也有它的长处，今天就记录一下安装的过程，下次也就方便一些了。。。
<h3>写在前面：</h3>
硬件要求： CPU支持虚拟化肯定是必须的了<br />
作为存储的节点，硬盘相应的大一些喽<br />
运行虚拟机的节点，RAM和CPU肯定是越犀利越<br />
数据库和管理节点，差不多就ok</p>




<p>操作系统： 本次用的是 CentOS 6.4 x86_64， 反正红帽系列都ok，debian系列的没有试过，但是应该也差不多</p>




<p>文档来源： Ovirt的好处就是文档多（当然，都是红帽的RHEV，工具的名字可能不一样，功能、参数差不多）
<h3>进入正题：</h3>
<h4>1. 防火墙设置</h4>
<h5>管理节点</h5>
<pre>    8080、8443： --web管理界面
    8006~8009： --和host通信</pre>
<h5>存储节点(本次使用nfs)</h5>
<pre>    $ cat /etc/sysconfig/nfs
    LOCKD_TCPPORT=32803
    LOCKD_UDPPORT=32769
    MOUNTD_PORT=892
    RQUOTAD_PORT=875
    STATD_PORT=662
    STATD_OUTGOING_PORT=2020</pre>
<h5>host节点</h5>
<pre>    5634 - 6166： 虚拟机通信(kvm等)
    16514： libvirt在线迁移
    49152 - 49216：虚拟机迁移、fencing等
    54321： host和manager通信（坑爹的端口哦）</pre>
<h5>Directory节点</h5>
<pre>    88, 464: Kerberos
    389, 636: ldap</pre>
最后，ssh的22端口肯定要开了，我们默认所有节点都安装ssh服务。。</p>




<p>要是单单自己装着玩，为了省事，就直接这样吧
<pre>    service iptables stop
    chkconfig --del iptables</pre>
<h4>2. 准备工作</h4>
Ovrit比较坑爹，需要一个DNS服务器来给自己干活，hosts文件都抗不住，最好装一个;<br />
用自己的机子，或者随便一台host或者管理机兼职一下</p>




<p>为每台机子设置好机器名、域名等: 达到以下结果(hosts文件就能办到)
<pre>    hostname --fqdn
        nodex.xx.com
    dnsdomainname
        xx.com</pre>
<h4>3. 安装管理节点</h4>
<pre>    cd /etc/yum.repo.d/
    wget http://ovirt.org/releases/stable/ovirt-engine.repo
    yum install ovirt-engine</pre>
ok,就是这么简单</p>




<p>配置：
<pre>    # engine-setup</pre>
会问一大堆东西，一般默认就ok，记住一点，数据库和admin的密码一定要记住，不然就自己后悔去吧
<pre>    oVirt Manager will be installed using the following configuration:
    =================================================================
    http-port: 8080
    https-port: 8443
    host-fqdn: engine.demo.ovirt.org
    auth-pass: ********
    db-pass: ********
    org-name: oVirt
    default-dc-type: NFS
    nfs-mp: /isoshare
    iso-domain-name: ISODomain
    override-iptables: yes
    Proceed with the configuration listed above? (yes|no):</pre>
数据库密码忘了还好，用的是postgresql，可以参考我的<a href="http://klwang.info/pgsql%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95/">这篇blog</a>搞定<br />
admin的密码忘了我就不知道怎么搞了，自己重新 engine-setup 吧</p>




<p>装完后，会自动把你的网卡桥接，做一个ovirtmanage的网卡，供它自己使用<br />
这里，如果你已经把iptables禁用了，就不要让它帮你设置iptables了
<h4>4. 设置</h4>
管理节点安装好，就可以进去操作一把了，地址 your_manager_ip:8080<br />
帐号密码是 admin/你的密码</p>




<p>概念和 cloudstack 差不多，有 datacenter、cluster、host、storage的概念，基本是相互包含的关系<br />
没有pods的概念，把 secondary 分为了 iso 和 export连个玩意，意思差不多，放iso文件和备份啥的</p>




<p>特别的，storage支持iscsi，大家可以试试</p>




<p>最终安装结果：<br />
一个default的datacenter、一个default的cluster、加一个放data的storage（我用的是NFS，NFS的安装设置也不是很难，参考我之前<a href="http://klwang.info/category/cloudstack/">转载的那个cludstack</a>里边的做法即可）<br />
然后，把 data的storage激活(active)，这个云就算是ok了，，，下来可以添加运行虚拟机的节点啦
<h4>5. 安装host节点</h4>
红帽就是红帽，不愧是做操作系统的；<br />
他们做了一个专门运行host的操作系统，也就是说让他们的host直接运行在裸机上<br />
我们就算了，在centos上装个运行虚拟机的服务就行了，不折腾了<br />
想折腾的朋友，看看这里：http://resources.ovirt.org/releases/stable/iso， 随便下载个试试</p>




<p>ok，装服务
<pre>    yum install vdsm vdsm-cli -y</pre>
就这么简单，同样，它会自己搞定网卡桥接的事情
<h4>6. 将host节点加入云</h4>
在管理界面中，点击hosts栏，点击add<br />
输入 显示名， 地址， root的 密码就ok了，会自动安装需要的软件，完后自动重启</p>




<p>最后，选中一个host机器，点击 active 激活就行了
<h4>7. 创建虚拟机</h4>
先把 iso 文件传上去， scp，嘿嘿。放在 engine-setup 时你自己设定的： nfs-mp 目录下（不会忘了吧）<br />
刷新一下，知道你看见自己上传的系统镜像iso</p>




<p>创建虚拟机很简单，自己设置一下网卡，默认的ovirt-manage网卡会桥接到自己的host机器上去<br />
完了，根据需要添加一个磁盘<br />
好了，剩下的就是平时装系统，不浪费篇幅说了
<h4>8. 制作模版</h4>
这个比较重要，云就是为了部署起来简单，这样的话，模版就不可或缺了</p>




<p>选一个要作为模版的虚拟机，开始处理：<br />
Linux
<pre>    touch /.unconfigured
    rm -rf /etc/ssh/ssh_host_*
    rm -rf /etc/udev/rules.d/70-*
    去除 /etc/sysconfig/network-scripts/ifcfg-eth* 中HWADDR那行
    删了 /var/log 下的垃圾（可选）
    init 0</pre>
好了，可以做模版了</p>




<p>Windows<br />
运行 Sysprep, 做好模版即可（一般就是一路回车搞定）</p>




<p>ok，有了模版就可以使用模版生成虚拟机了
<h4>9. 在线迁移</h4>
云的最大好处就是可以将虚拟机在线迁移到其他节点，操作很简单，图形界面，点击 migrage 就行啦 自己试试吧，只可意会不能言传的，这东西
<h4>10. 用户管理</h4>
Ovirt的用户管理真难受，自己还不管，非要搞个认证服务器来，我们使用IPA<br />
IPA安装（不能和manage在一个节点哦）：
<pre>    yum install ipa-server bind bind-dyndb-ldap
    ipa-server-install</pre>
一路按照提示输入信息<br />
切记切记要设置好DNS服务器，安装过程后会自动识别机器名和域名<br />
最后，这句话：
<pre>    Sample zone file for bind has been created in /tmp/sample.zone.ygzij5.db</pre>
生成了一个关于ldap、krb等的DNS解析，如下：
<pre>    ; ldap servers
    _ldap._tcp              IN SRV 0 100 389        ipaserver.example.com
    ;kerberos realm
    _kerberos               IN TXT EXAMPLE.COM
    ; kerberos servers
    _kerberos._tcp          IN SRV 0 100 88         ipaserver.example.com
    _kerberos._udp          IN SRV 0 100 88         ipaserver.example.com
    _kerberos-master._tcp   IN SRV 0 100 88         ipaserver.example.com
    _kerberos-master._udp   IN SRV 0 100 88         ipaserver.example.com
    _kpasswd._tcp           IN SRV 0 100 464        ipaserver.example.com
    _kpasswd._udp           IN SRV 0 100 464        ipaserver.example.com</pre>
将这些东西放到你的DNS服务器的 解析文件中去
<pre>    service named reload</pre>
添加用户
<pre>    kinit admin
    ipa user-add
    ipa password login-name --循环添加多个用户
    kdestory</pre>
然后，在你的Ovirt中Uers中设置用户权限，就可以用新添加的用户登陆啦。。
<h4>后记</h4>
文章写的比较简单，默认读者应该 对linux比较熟悉</p>




<p>参考文章:</p>




<p><a href="https://access.redhat.com/site/documentation//en-US/Red_Hat_Enterprise_Linux/6/html/Identity_Management_Guide/index.html">Red_Hat_Identity_Management_Guide</a>
<a href="http://www.ovirt.org/File:OVirt-3.0-Installation_Guide-en-US.pdf">OVirt-3.0-Installation_Guide</a>
<a href="https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Virtualization/3.2-Beta/html/Administration_Guide/index.html" target="_blank">RHEV_Administration_Guide</a>
<a href="https://access.redhat.com/site/documentation//en-US/Red_Hat_Enterprise_Virtualization/3.2-Beta/html/Installation_Guide/index.html">RHEV_Installation_Guide</a>
<a href="https://access.redhat.com/site/documentation//en-US/Red_Hat_Enterprise_Virtualization/3.2-Beta/html/Quick_Start_Guide/index.html">RHEV_Quick_Start_Guide</a>
<a href="http://www.rjsystems.nl/en/2100-dns-discovery-openldap.php">DNS discovery for OpenLDAP</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloudstack 中 reset_password 功能设置]]></title>
    <link href="http://github.klwang.info/blog/use-of-cloudstack-reset_password-method/"/>
    <updated>2013-05-26T00:00:00+08:00</updated>
    <id>http://github.klwang.info/blog/use-of-cloudstack-reset_password-method</id>
    <content type="html"><![CDATA[<p>Cloudstack中对于虚拟机，有一个reset_password的功能，一直疑惑这玩意是干啥的</p>




<p>没错，就是重置root或者Administrator密码的，下面写下配置的过程</p>




<p>Windows</p>




<p>windows的比较简单，按照官方文档、安装一个小程序就ok了</p>




<p>点击<a href="http://sourceforge.net/projects/cloudstack/files/Password%20Management%20Scripts/CloudInstanceManager.msi">这里</a>下载</p>




<p>一路回车安装即可</p>




<p>Linux</p>




<p>点击<a href="http://sourceforge.net/projects/cloudstack/files/Password%20Management%20Scripts/cloud-set-guest-password">这里</a>下载
<pre>    mv cloud-set-guest-password /etc/rc.d/init.d
    chmod +x /etc/init.d/cloud-set-guest-password
    chkconfig --add cloud-set-guest-password</pre>
很明显，上面说的 redhat 系列的操作系统，在ubuntu上需要修改一些东西</p>




<p>比如，脚本的这行
<pre>    DHCP_FILES="/var/lib/dhclient/dhclient-eth0.leases /var/lib/dhcp3/dhclient.eth0.leases"</pre>
先看看操作系统的dhcp文件是不是叫那个名字，要是不是的话，就把最新的复制一个，取名dhclient.eth0.leases
<pre>    mv cloud-set-guest-password /etc/init.d
    chmod +x /etc/init.d/cloud-set-guest-password
    update-rc.d -n cloud-set-guest-password defaults</pre>
ok，可以测试一下，脚本本身比较简单，要是不工作的话，自己修改修改，调试调试，多试几次</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cloudstack 虚拟机vnc配置]]></title>
    <link href="http://github.klwang.info/blog/cloudstack-virtualmachine-vnc-config/"/>
    <updated>2013-05-09T00:00:00+08:00</updated>
    <id>http://github.klwang.info/blog/cloudstack-virtualmachine-vnc-config</id>
    <content type="html"><![CDATA[<p><h4>1. cloudstack使用kvm实现虚拟机时 ps aux | grep kvm，可以发现神奇的东西</h4>
<a href="http://klwang.info/blog/wp-content/uploads/2013/05/kvm.png"><img alt="kvm" src="http://klwang.info/blog/wp-content/uploads/2013/05/kvm.png" width="650" /></a>
<h4>2. 有了vnc的监听地址和端口，我们就能很容易的链接虚拟机了。</h4>
<p style="padding-left: 30px;">例如：运行vm的host地址为192.171.1.1，则我们就可以使用任意一台和该host机器互通的机器访问该vm了</p>
<p style="padding-left: 30px;">vncviewer 192.171.1.1:11（假设我们使用vncviewer来链接虚拟机）</p>
<p style="padding-left: 30px;">至此，我们就可以越过cloudstack的web界面来访问vm了</p></p>




<p><h4>3. 下面是我写的一个用来获取每个虚拟机链接地址的脚本</h4>
<pre>    #!/bin/bash</pre></p>




<p>    ip=$(ifconfig cloudbr0 | grep 'inet addr' | awk -F ':' '{print $2}' | awk '{print $1}')<br />
    ps aux | grep vnc | awk '{print $21, $(NF-4)}' | grep '0.0.0.0' \<br />
    | while read name vnc; do<br />
    mysql -ucloud -pcloudstack cloud -e \<br />
        "select concat(name, ' : ', '$vnc', ' : ', private_ip_address ) as d \<br />
        from vm_instance where instance_name = '$name'"<br />
        | grep -v d | sed "s/0.0.0.0/$ip/g"<br />
    done | grep -v VM
从脚本中，你也应该能看出来挂关于虚拟机的信息都是放在 vm_instance 中的（其他的问题，大家自己探索吧）</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cloudstack 基本概念]]></title>
    <link href="http://github.klwang.info/blog/cloudstack-basic-concept/"/>
    <updated>2013-05-09T00:00:00+08:00</updated>
    <id>http://github.klwang.info/blog/cloudstack-basic-concept</id>
    <content type="html"><![CDATA[<p><strong>Zone:</strong></p>




<p>区域是 CloudStack 部署中最大的组织单位。一个区域通常会对应到一个单一的数据中心。将基础设施组织进区域的好处是提供物理隔离和冗余。例如,每个区域都可以有自己的电源和网络上行；Zone 包含一个或者多个 Pods, 区域中二级存储被所有 pods 进行共享。</p>




<p><strong>Pod:</strong></p>




<p>一般代表一个机架,同一 pod 中的主机处于同一子网内。pods中包含一个或者多个一级存储服务器</p>




<p><strong>Cluster:</strong></p>




<p>就是--集群,由多个主机组成的集群。集群中机器共享一个一级存储服务器；</p>




<p><strong>Host:</strong></p>




<p>一个主机,集群中的主机,此处可以理解成一台装有 xenserver 的物理机器。</p>




<p><strong>Primary storage:</strong></p>




<p><strong></strong> 一级存储跟集群相关联,用于为集群中所有运行在主机(hosts)上面的虚拟机存储硬盘 跟卷文件,一般来说,至少需要一个一级存储,为提高性能,尽量部署在接近主机(hosts)的位 置。可以通过 ISCSI或者 NFS 技术实现</p>




<p><strong>Secondary storage:</strong></p>




<p><strong></strong> 二级存储跟zone相关联,其存储了模版文件---可以启动虚拟机的操作系统镜像 、 ISO镜像----操作系统光盘镜像、 硬盘卷快照—存储了用户恢复或者创建新模版的虚拟机数据副本。二级存储可以使用NFS服务或者Openstack对象存储技术(Swift),最小的容量为100GB,其 需要部署在跟客户机同一区域(zone)中,并且对于区域中的主机都是可用的。</p>




<p><strong>Management server:</strong></p>




<p>运行 CloudStack 管理服务跟 Mysql 数据库的机器(也就是搭建 CloudStack 云系统的机器),管 理服务器也可以安装在虚拟机上面。</p>




<p><strong>Mysql cloud db:</strong></p>




<p><strong></strong> 用于存放相关数据信息,诸如网络地址等等,可以通过mysql 客户 端登入查看相关表以及相关属性。</p>




<p><strong>系统虚机:</strong></p>




<p>cloudstack 的每加入一个个区域就会创建相应的系统虚拟机, 一般一个区域会创建三个,分别控制模板,虚拟机系统,和网络。</p>




<p><a href="http://heylinux.com/wp-content/uploads/2012/11/map.png"><img alt="" src="http://heylinux.com/wp-content/uploads/2012/11/map.png" width="521" height="301" /></a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【转】安装部署CloudStack 4.0企业私有云平台]]></title>
    <link href="http://github.klwang.info/blog/install-cloudstack-4-0/"/>
    <updated>2013-05-06T00:00:00+08:00</updated>
    <id>http://github.klwang.info/blog/install-cloudstack-4-0</id>
    <content type="html"><![CDATA[<p><div /></p>




<p><strong>参考资料</strong>
<a href="http://incubator.apache.org/cloudstack/docs/en-US/Apache_CloudStack/4.0.0-incubating/html/Installation_Guide/installation.html" target="_blank">CloudStack Installation_Guide/installation.html</a>
<a href="http://incubator.apache.org/cloudstack/docs/en-US/Apache_CloudStack/4.0.0-incubating/html/Admin_Guide/working-with-iso.html" target="_blank">CloudStack Admin_guide/working-with-iso.html</a>
<a href="http://incubator.apache.org/cloudstack/docs/en-US/Apache_CloudStack/4.0.0-incubating/html/Admin_Guide/creating-vms.html" target="_blank">CloudStack Admin_guide/creating-vms.html</a>
<a href="http://incubator.apache.org/cloudstack/docs/en-US/Apache_CloudStack/4.0.0-incubating/html/Admin_Guide/create-templates-overview.html" target="_blank">CloudStack Admin_guide/create-templates-overview.html</a></p>




<p><strong>目录结构</strong>
1. 什么是CloudStack<br />
2. 宿主机的系统需求<br />
3. 配置安装源<br />
4. 安装Management Server<br />
5. 安装配置KVM虚拟化Host主机<br />
6. 用户界面<br />
7. 配置Management Server<br />
8. 创建Instance类型<br />
9. 创建ISO安装源并创建Instance<br />
10. 创建并定制Template<br />
11. 通过定制的Template创建VM Instance<br />
12. 其它优化设置</p>




<p><strong>环境介绍</strong>
OS: Ubuntu Server 12.04.1 64-bit<br />
Server:<br />
10.6.203.10 cloudstack-server-1<br />
- CloudStack Management Server<br />
- CloudStack Agent<br />
- NFS Server<br />
- MySQL Server<br />
注：CloudStack支持很好的分布式架构，上面 - 代表的所有角色都可以部署在不同的机器上，但在测试环境中因为条件有限我全部都部署到了一台机器上。</p>




<p><strong>1. 什么是CloudStack</strong>
CloudStack是一个开源的具有高可用性及扩展性的云计算平台。<br />
提到开源的云计算平台，相信大家首先想到的可能是OpenStack，目前国内的几家云计算平台如阿里云、盛大云以及新浪SAE貌似都基于OpenStack做了二次开发。<br />
但使用过CloudStack之后，你会发现其实CloudStack更像是一个商业化过后的产品，有着非常好的用户界面，各个模块默认集成的很好，且安装与部署过程也相对容易一些。</p>




<p>事实上，CloudStack的前身是Cloud.com，后来被思杰收购。2011年7月，Citrix收购Cloud.com，将CloudStack 100%开源并交给Apache软件基金会管理。<br />
同时，CloudStack已经有了许多商用客户，包括GoDaddy、英国电信、日本电报电话公司、塔塔集团、韩国电信等。</p>




<p>因此，CloudStack本身其实就是一个商业化过后的产品，然后在面对OpenStack等开源系统的巨大竞争压力的情况下选择了同样的开源。</p>




<p>目前Cloudstack支持管理大部分主流的hypervisors，如KVM，XenServer，VMware，Oracle VM，Xen等。<br />
CloudStack具有商业软件所拥有的完善的用户权限管理，可以让用户构建一个安全的多租户云计算环境。<br />
同时兼容Amazon AWS API 接口，可用来管理AWS的资源。</p>




<p>CloudStack的官方网址如下(目前还处于Apache基金会的孵化器中)：</p>




<p>http://incubator.apache.org/cloudstack/</p>




<p>以下是CloudStack的系统架构，基本上与其他云计算平台相同：
<img title="Infrastructure" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/Infrastructure.png" width="477" height="497" /></p>




<p><strong>2. 宿主机的系统需求</strong>
由于CloudStack 4.0 限定了libvirt版本 &gt; 0.9.4，并在社区宣称所支持的OS为 CentOS/RHEL 6.2 以上或 Ubuntu Server 12.04。<br />
因此，这里我们选择 Ubuntu Server 12.04.1 作为我们的操作系统。<br />
官方下载地址：http://releases.ubuntu.com/precise/ubuntu-12.04.1-server-amd64.iso</p>




<p>另外，官方要求硬件至少满足以下条件：<br />
1) 支持硬件虚拟化(Intel-VT 或 AMD-V)<br />
2) 64位的x86 CPU<br />
3) 4G内存<br />
4) 36GB硬盘<br />
5) 1张网卡</p>




<p><strong>3. 配置安装源</strong>
配置国内的网易镜像源<br />
$ sudo sed -i s/us.archive.ubuntu.com/mirrors.163.com/g /etc/apt/sources.list<br />
$ sudo sed -i s/security.ubuntu.com/mirrors.163.com/g /etc/apt/sources.list</p>




<p>配置CloudStack官方源<br />
$ sudo vim /etc/apt/sources.list.d/cloudstack.list<br />
deb http://cloudstack.apt-get.eu/ubuntu precise 4.0</p>




<p>配置CloudStack官方源证书<br />
$ wget -O - http://cloudstack.apt-get.eu/release.asc| sudo apt-key add -</p>




<p>更新系统的安装源<br />
$ sudo apt-get update</p>




<p><strong>4. 安装Management Server</strong>
<strong>4.1 准备好操作系统环境</strong>
查看主机名<br />
$ hostname --fqdn<br />
cloudstack-server-1</p>




<p>$ sudo vim /etc/hosts<br />
添加以下记录<br />
10.6.203.10 cloudstack-server-1</p>




<p>安装时间服务器<br />
$ sudo apt-get install openntpd</p>




<p><strong>4.2 下载安装 CloudStack Management Server 与 vhd-util</strong>
安装CloudStack Management Server<br />
$ sudo apt-get install cloud-client</p>




<p>将用户cloud加入到sudo用户组 //CloudStack默认以cloud用户启动，但默认会通过sudo以root身份管理相关文件与目录<br />
$ sudo adduser cloud sudo</p>




<p>配置sudo用户组免密码切换 //同样是为了解决和上面相同的权限问题<br />
$ sudo visudo<br />
%sudo ALL=(ALL:ALL) NOPASSWD:ALL</p>




<p>初始化root用户密码，如cloudstack //CloudStack默认需要root权限远程SSH连接到Agent<br />
$ sudo -i<br />
# passwd
<div id="highlighter_194438">
<div>
<div>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>Enter new UNIX password:</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>2</code></td>
<td><code>Retype new UNIX password:</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>3</code></td>
<td><code>passwd</code><code>: password updated successfully</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
# chmod 777 /root //为了解决一个bug，即CloudStack默认以cloud用户启动，但却读取的是启动服务的用户的home目录用来存放一些临时文件，从而导致权限问题<br />
$ exit</p>




<p>下载vhd-util<br />
$ sudo wget http://download.cloud.com.s3.amazonaws.com/tools/vhd-util<br />
$ sudo mv vhd-util /usr/lib/cloud/common/scripts/vm/hypervisor/xenserver/</p>




<p><strong>4.3 安装配置MySQL数据库</strong>
$ sudo apt-get install mysql-server<br />
在弹出的界面中输入密码，如: cloudstack</p>




<p>修改MySQL配置文件参数<br />
$ sudo vim /etc/mysql/my.cnf<br />
在[mysqld]模块中加入以下参数
<div id="highlighter_519248">
<div>
<div>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>innodb_rollback_on_timeout=1</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>2</code></td>
<td><code>innodb_lock_wait_timeout=600</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>3</code></td>
<td><code>max_connections=350</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>4</code></td>
<td><code>log-bin=mysql-bin</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>5</code></td>
<td><code>binlog-</code><code>format</code> <code>= </code><code>'ROW'</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
重启MySQL<br />
$ sudo service mysql restart</p>




<p>初始化数据库cloud<br />
$ sudo cloud-setup-databases cloud:cloudstack@localhost --deploy-as=root:cloudstack -m cloudstack -k cloudstack
<div id="highlighter_230432">
<div>
<div>
<table>
<tbody>
<tr>
<td><code>01</code></td>
<td><code>Mysql user name:cloud                                           [ OK ]</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>02</code></td>
<td><code>Mysql user password:cloudstack                                  [ OK ]</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>03</code></td>
<td><code>Mysql server ip:localhost                                       [ OK ]</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>04</code></td>
<td><code>Mysql server port:3306                                          [ OK ]</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>05</code></td>
<td><code>Mysql root user name:root                                       [ OK ]</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>06</code></td>
<td><code>Mysql root user password:cloudstack                             [ OK ]</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>07</code></td>
<td><code>Checking Cloud database files ...                               [ OK ]</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>08</code></td>
<td><code>Checking </code><code>local</code> <code>machine </code><code>hostname</code> <code>...                             [ OK ]</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>09</code></td>
<td><code>Checking SELinux setup ...                                      [ OK ]</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>10</code></td>
<td><code>Detected </code><code>local</code> <code>IP address as 10.6.203.10,</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>11</code></td>
<td><code>will use as cluster management server node IP                   [ OK ]</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>12</code></td>
<td><code>Preparing /etc/cloud/management/db.properties                   [ OK ]</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>13</code></td>
<td><code>Applying /usr/share/cloud/setup/create-database.sql             [ OK ]</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>14</code></td>
<td><code>Applying /usr/share/cloud/setup/create-schema.sql               [ OK ]</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>15</code></td>
<td><code>Applying /usr/share/cloud/setup/create-database-premium.sql     [ OK ]</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>16</code></td>
<td><code>Applying /usr/share/cloud/setup/create-schema-premium.sql       [ OK ]</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>17</code></td>
<td><code>Applying /usr/share/cloud/setup/server-setup.sql                [ OK ]</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>18</code></td>
<td><code>Applying /usr/share/cloud/setup/templates.sql                   [ OK ]</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>19</code></td>
<td><code>Applying /usr/share/cloud/setup/create-index-fk.sql             [ OK ]</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>20</code></td>
<td><code>Processing encryption ...                                       [ OK ]</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>21</code></td>
<td><code>Finalizing setup ...                                            [ OK ]</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>22</code></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>23</code></td>
<td><code>CloudStack has successfully initialized database,</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>24</code></td>
<td><code>you can check your database configuration </code><code>in</code> <code>/etc/cloud/management/db.properties</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<strong>4.4 配置NFS共享</strong>
CloudStack 需要一个地方来存放Primar和Secondary Storage，官方推荐使用NFS共享。</p>




<p>安装NFS<br />
$ sudo apt-get install nfs-common nfs-kernel-server</p>




<p>创建目录<br />
$ sudo mkdir -p /export/primary<br />
$ sudo mkdir -p /export/secondary</p>




<p>编辑NFS配置文件<br />
$ sudo vim /etc/exports
<div id="highlighter_879631">
<div>
<div>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>/</code><code>export</code> <code>*(rw,async,no_root_squash,no_subtree_check)</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
刷新配置<br />
$ sudo exportfs -a</p>




<p>挂载测试NFS共享<br />
$ sudo mkdir /mnt/primary<br />
$ sudo mount -t nfs 10.6.203.10:/export/primary /mnt/primary<br />
$ sudo mkdir /mnt/secondary<br />
$ sudo mount -t nfs 10.6.203.10:/export/secondary /mnt/secondary</p>




<p>$ df -h
<div id="highlighter_66106">
<div>
<div>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>Filesystem                    Size  Used Avail Use% Mounted on</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>2</code></td>
<td><code>...</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>3</code></td>
<td><code>10.6.203.10:/</code><code>export</code><code>/primary    434G  7.8G  404G   2% /mnt/primary</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>4</code></td>
<td><code>10.6.203.10:/</code><code>export</code><code>/secondary  434G  7.8G  404G   2% /mnt/secondary</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
$ sudo vim /etc/fstab<br />
增加以下内容
<div id="highlighter_939905">
<div>
<div>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>10.6.203.10:/</code><code>export</code><code>/primary /mnt/primary    nfs rw,tcp,intr 0 1</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>2</code></td>
<td><code>10.6.203.10:/</code><code>export</code><code>/secondary /mnt/secondary    nfs rw,tcp,intr 0 1</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<strong>4.5 准备System VM Template</strong>
我们选择KVM作为虚拟化引擎<br />
$ sudo /usr/lib/cloud/common/scripts/storage/secondary/cloud-install-sys-tmplt -m /mnt/secondary \<br />
-u http://download.cloud.com/templates/acton/acton-systemvm-02062012.qcow2.bz2 -h kvm -F<br />
整个过程大概需要花费半个小时
<div id="highlighter_899798">
<div>
<div>
<table>
<tbody>
<tr>
<td><code>01</code></td>
<td><code>--2012-11-12 14:49:18--  <a href="http://download.cloud.com/templates/acton/acton-systemvm-02062012.qcow2.bz2">http://download.cloud.com/templates/acton/acton-systemvm-02062012.qcow2.bz2</a></code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>02</code></td>
<td><code>Resolving download.cloud.com (download.cloud.com)... 207.171.189.81</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>03</code></td>
<td><code>Connecting to download.cloud.com (download.cloud.com)|207.171.189.81|:80... connected.</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>04</code></td>
<td><code>HTTP request sent, awaiting response... 200 OK</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>05</code></td>
<td><code>Length: 286036668 (273M) [binary/octet-stream]</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>06</code></td>
<td><code>Saving to: `/usr/lib/cloud/common/scripts/storage/secondary/4aae2546-33e1-4784-9e69-09e1ef9d6fb4.qcow2'</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>07</code></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>08</code></td>
<td><code>100%[======================================================================&gt;] 286,036,668  188K/s   </code><code>in</code> <code>24m 53s </code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>09</code></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>10</code></td>
<td><code>2012-11-12 15:14:13 (187 KB/s) - `/usr/lib/cloud/common/scripts/storage/secondary/4aae2546-33e1-4784-9e69-09e1ef9d6fb4.qcow2' saved [286036668/286036668]</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>11</code></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>12</code></td>
<td><code>Uncompressing to /usr/lib/cloud/common/scripts/storage/secondary/4aae2546-33e1-4784-9e69-09e1ef9d6fb4.qcow2.tmp (</code><code>type</code> <code>bz2)...could take a long </code><code>time</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>13</code></td>
<td><code>Moving to /mnt/secondary/template/tmpl/1/3///4aae2546-33e1-4784-9e69-09e1ef9d6fb4.qcow2...could take a </code><code>while</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>14</code></td>
<td><code>Successfully installed system VM template  to /mnt/secondary/template/tmpl/1/3/</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<strong>5. 安装配置KVM虚拟化Host主机</strong></p>




<p><strong>5.1 安装配置Agent</strong>
$ sudo apt-get install cloud-agent</p>




<p><strong>5.2 安装配置libvirt</strong>
$ sudo vim /etc/libvirt/libvirtd.conf<br />
修改以下配置
<div id="highlighter_30583">
<div>
<div>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>listen_tls = 0</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>2</code></td>
<td><code>listen_tcp = 1</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>3</code></td>
<td><code>tcp_port = </code><code>"16059"</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>4</code></td>
<td><code>auth_tcp = </code><code>"none"</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>5</code></td>
<td><code>mdns_adv = 0</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
查看配置<br />
$ cat /etc/libvirt/libvirtd.conf | grep -v '#' | grep -v "^$"
<div id="highlighter_577714">
<div>
<div>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>listen_tls = 0</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>2</code></td>
<td><code>listen_tcp = 1</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>3</code></td>
<td><code>tcp_port = </code><code>"16509"</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>4</code></td>
<td><code>mdns_adv = 0</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>5</code></td>
<td><code>unix_sock_group = </code><code>"libvirtd"</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>6</code></td>
<td><code>unix_sock_rw_perms = </code><code>"0770"</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>7</code></td>
<td><code>auth_unix_ro = </code><code>"none"</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>8</code></td>
<td><code>auth_unix_rw = </code><code>"none"</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>9</code></td>
<td><code>auth_tcp = </code><code>"none"</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
$ sudo vim /etc/init/libvirt-bin.conf<br />
修改以下参数
<div id="highlighter_840130">
<div>
<div>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>env</code> <code>libvirtd_opts=</code><code>"-d -l"</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
# sudo vim /etc/libvirt/qemu.conf<br />
修改以下参数
<div id="highlighter_901087">
<div>
<div>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>vnc_listen = </code><code>"0.0.0.0"</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
重启服务<br />
$ sudo service libvirt-bin restart</p>




<p><strong>5.3 配置安全策略</strong>
$ sudo dpkg --list "apparmor"
<div id="highlighter_224440">
<div>
<div>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>Desired=Unknown/Install/Remove/Purge/Hold</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>2</code></td>
<td><code>| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>3</code></td>
<td><code>|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>4</code></td>
<td><code>||/ Name                                Version                             Description</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>5</code></td>
<td><code>+++-===================================-===================================-======================================================================================</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>6</code></td>
<td><code>ii  apparmor</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>7</code></td>
<td><code>                           </code><code>2.7.102-0ubuntu3.1                  User-space parser utility </code><code>for</code> <code>AppArmor</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
$ sudo ln -s /etc/apparmor.d/usr.sbin.libvirtd /etc/apparmor.d/disable/<br />
$ sudo ln -s /etc/apparmor.d/usr.lib.libvirt.virt-aa-helper /etc/apparmor.d/disable/<br />
$ sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.libvirtd<br />
$ sudo apparmor_parser -R /etc/apparmor.d/usr.lib.libvirt.virt-aa-helper</p>




<p><strong>5.4 配置网桥</strong>
需要注意的是，官方文档给出的配置参数会导致网络不可用。<br />
正确的配置是将物理网卡设置为manual，然后在虚拟网卡上设置IP并桥接到物理网卡上。<br />
$ sudo vim /etc/network/interfaces
<div id="highlighter_111005">
<div>
<div>
<table>
<tbody>
<tr>
<td><code>01</code></td>
<td><code># This file describes the network interfaces available on your system</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>02</code></td>
<td><code># and how to activate them. For more information, see interfaces(5).</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>03</code></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>04</code></td>
<td><code># The loopback network interface</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>05</code></td>
<td><code>auto lo</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>06</code></td>
<td><code>iface lo inet loopback</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>07</code></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>08</code></td>
<td><code># The primary network interface</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>09</code></td>
<td><code>auto eth0</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>10</code></td>
<td><code>iface eth0 inet manual</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>11</code></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>12</code></td>
<td><code># Public network</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>13</code></td>
<td><code>auto cloudbr0</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>14</code></td>
<td><code>iface cloudbr0 inet static</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>15</code></td>
<td><code>   </code><code>address 10.6.203.10</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>16</code></td>
<td><code>   </code><code>netmask 255.255.0.0</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>17</code></td>
<td><code>   </code><code>gateway 10.6.255.1</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>18</code></td>
<td><code>   </code><code>bridge_ports eth0</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>19</code></td>
<td><code>   </code><code>bridge_fd 5</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>20</code></td>
<td><code>   </code><code>bridge_stp off</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>21</code></td>
<td><code>   </code><code>bridge_maxwait 1</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>22</code></td>
<td><code>   </code><code>dns-nameservers 10.6.255.253 61.139.2.69</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>23</code></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>24</code></td>
<td><code># Private network</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>25</code></td>
<td><code>auto cloudbr1</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>26</code></td>
<td><code>iface cloudbr1 inet manual</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>27</code></td>
<td><code>   </code><code>bridge_ports eth0</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>28</code></td>
<td><code>   </code><code>bridge_fd 5</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>29</code></td>
<td><code>   </code><code>bridge_stp off</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>30</code></td>
<td><code>   </code><code>bridge_maxwait 1</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
$ sudo /etc/init.d/networking restart<br />
$ sudo /etc/init.d/networking start</p>




<p><strong>5.5 配置防火墙</strong>
$ sudo ufw allow proto tcp from any to any port 22<br />
$ sudo ufw allow proto tcp from any to any port 80<br />
$ sudo ufw allow proto tcp from any to any port 1798<br />
$ sudo ufw allow proto tcp from any to any port 16509<br />
$ sudo ufw allow proto tcp from any to any port 5900:6100<br />
$ sudo ufw allow proto tcp from any to any port 49152:49216</p>




<p><strong>6. 用户界面</strong>
禁用系统默认的tomcat服务<br />
$ sudo /etc/init.d/tomcat6 stop
<div id="highlighter_866858">
<div>
<div>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>* Stopping Tomcat servlet engine tomcat6 [ OK ]</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
$ sudo update-rc.d -f tomcat6 remove
<div id="highlighter_175625">
<div>
<div>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>Removing any system startup links </code><code>for</code> <code>/etc/init.d/tomcat6 ...</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>2</code></td>
<td><code>  </code><code>/etc/rc0.d/K08tomcat6</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>3</code></td>
<td><code>  </code><code>/etc/rc1.d/K08tomcat6</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>4</code></td>
<td><code>  </code><code>/etc/rc2.d/S92tomcat6</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>5</code></td>
<td><code>  </code><code>/etc/rc3.d/S92tomcat6</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>6</code></td>
<td><code>  </code><code>/etc/rc4.d/S92tomcat6</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>7</code></td>
<td><code>  </code><code>/etc/rc5.d/S92tomcat6</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>8</code></td>
<td><code>  </code><code>/etc/rc6.d/K08tomcat6</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
启动cloud-management<br />
$ cd ~<br />
$ sudo /etc/init.d/cloud-management restart
<div id="highlighter_126514">
<div>
<div>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>* Starting CloudStack-specific Tomcat servlet engine cloud-management [ OK ]</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
登陆用户界面</p>




<p>http://10.6.203.10:8080/client/</p>




<p>默认账号密码<br />
admin/password</p>




<p><img title="login" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/login.png" width="600" height="346" /></p>




<p>可以看到如下图所示向导界面
<img title="init-1" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init-1.png" width="586" height="600" /></p>




<p>选择左边的按钮"I have used CloudStack before, skip this guide"。<br />
即进入如下图所示用户界面
<img title="init-2" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init-2.png" width="600" height="438" /></p>




<p><strong>7. 配置Management Server</strong>
整个Management Server的架构如下
<img title="map" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/map.png" width="521" height="301" /></p>




<p><img title="map2" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/map2.png" width="600" height="558" /></p>




<p><strong>7.1 修改Web管理员默认密码</strong>
登陆 http://10.6.203.10:8080/client<br />
进入 Accounts - admin - View Users - admin 页面，点击 Change Password
<img title="init-3" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init-3.png" width="600" height="390" /></p>




<p>接着我们进入到 Infrastructure 界面，可以看到目前没有任何设置，所有数目都是0。
<img title="init-4" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init-4.png" width="600" height="448" /></p>




<p><strong>7.2 创建相关配置</strong>
在用户界面中通过向导，依次创建<br />
"Zone" - "Add Zone" - "Physical Network" - "Pod" - "Guest Traffic" - "Storage Traffic" -<br />
"Cluster" - "Host" - "Primary Storage" - "Secondary Storage"</p>




<p>如下列图片所示：<br />
选择Basic安装向导
<img title="init-5" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init-5.png" width="600" height="554" /></p>




<p>配置Zone
<img title="init-6" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init-6.png" width="600" height="506" /></p>




<p>配置Physical Network
<img title="init-7" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init-7.png" width="600" height="504" /></p>




<p>配置Pod，此处的网络设置主要用于CloudStack内部的管理通信
<img title="init-8" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init-8.png" width="600" height="520" /></p>




<p>配置Guest Traffic，此处的网络设置用于给Instance分配IP
<img title="init-9" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init-9.png" width="600" height="504" /></p>




<p>配置Storage Traffic，此处的网络设置用于存储系统
<img title="init-10" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init-10.png" width="600" height="522" /></p>




<p>配置Cluster
<img title="init-11" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init-11.png" width="600" height="504" /></p>




<p>配置Host，即Agent主机，虚拟机的宿主机，用户名密码与SSH相同
<img title="init-12" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init-12.png" width="600" height="506" /></p>




<p>配置主存储空间，我选择了本地mount点，即mount过后的本地路径，分布式部署时可以选择NFS模式
<img title="init-13" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init-13.png" width="600" height="498" /></p>




<p>配置附属存储空间，仅支持NFS模式
<img title="init-14" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init-14.png" width="600" height="510" /></p>




<p>配置完成，点击"Launch zone"
<img title="init-15" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init-15.png" width="600" height="498" /></p>




<p>可以看到整个创建过程，最后创建完成之后提示是否启用Zone，选择Yes
<img title="init-16" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init-16.png" width="600" height="510" /></p>




<p><strong>8. 创建Instance类型</strong>
默认有Small Instance和Medium Instance<br />
我们再分别创建两个类型：Large 和 xLarge，如下图所示：</p>




<p>创建Large Instance Type
<img title="init2-1" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init2-1.png" width="600" height="554" /></p>




<p>创建xLarge Instance Type
<img title="init2-2" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init2-2.png" width="600" height="582" /></p>




<p>查看xLarge Instance Type属性
<img title="init2-3" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init2-3.png" width="600" height="508" /></p>




<p><strong>9. 创建ISO安装源并创建Instance</strong>
在用户界面中配置<br />
Template - Select view: ISO - Redister ISO
<div id="highlighter_503099">
<div>
<div>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>Name: Ubuntu-10.10</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>2</code></td>
<td><code>Description: Ubuntu Server 10.10 64-bit x86</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>3</code></td>
<td><code>URL: <a href="http://old-releases.ubuntu.com/releases/maverick/ubuntu-10.10-server-amd64.iso">http://old-releases.ubuntu.com/releases/maverick/ubuntu-10.10-server-amd64.iso</a></code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>4</code></td>
<td><code>Zone: All Zones</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>5</code></td>
<td><code>Bootable: Yes</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>6</code></td>
<td><code>OS Type: Ubuntu 10.10 (64-bit)</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>7</code></td>
<td><code>Extractable: Yes</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>8</code></td>
<td><code>Public: Yes</code></td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><code>9</code></td>
<td><code>Featured: Yes</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
如下图所示：
<img title="init2-4" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init2-4.png" width="600" height="484" /></p>




<p>然后，等待ISO的Ready状态为Yes的时候，如下图所示
<img title="init2-8" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init2-8.png" width="600" height="532" /></p>




<p>接着，就可以开始使用ISO创建Instance，并在后面跟将其制作成为Template了。</p>




<p>如果想下载的速度快一些，可以通过在主机上搭建一个HTTP Server<br />
但需要登录到Secondary Storage VM内部对防火墙规则进行一些修改，否则无法访问主机的80端口<br />
具体步骤如下<br />
$ sudo apt-get install apache2</p>




<p>$ sudo netstat -lntp | grep -w 80
<div id="highlighter_763062">
<div>
<div>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      6157/apache2</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
上传Ubuntu安装ISO到服务器的/var/www/iso，例如ubuntu-10.10-server-amd64.iso</p>




<p>$ sudo mkdir /var/www/iso<br />
$ sudo chown www-data:www-data /var/www/iso<br />
$ sudo chown www-data:www-data /var/www/iso/ubuntu-10.10-server-amd64.iso</p>




<p>获取Secondary Storage VM的IP(169.254.x.x)，如下图所示
<img title="init2-7" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init2-7.png" width="600" height="600" /></p>




<p>登录Secondary Storage VM修改防火墙规则<br />
$ sudo -i<br />
# ssh -i .ssh/id_rsa.cloud -p 3922 169.254.1.99<br />
root@s-30-VM:~#iptables -D OUTPUT -o eth1 -p tcp -m state --state NEW -m tcp --dport 80 -j REJECT --reject-with icmp-port-unreachable</p>




<p>将URL设置为 http://10.6.203.10/iso/ubuntu-10.10-server-amd64.iso 即可</p>




<p><strong>10. 创建并定制Template</strong>
<strong>10.1 创建初始Instance</strong>
通过刚刚安装的ISO文件来创建一个Instance<br />
具体步骤如下</p>




<p>选择ISO
<img title="init3-1" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init3-1.png" width="600" height="482" /></p>




<p>选择刚刚创建好的ISO
<img title="init3-2" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init3-2.png" width="600" height="436" /></p>




<p>选择xLarge Instance，这里跟根据需要自己决定
<img title="init3-3" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init3-3.png" width="600" height="428" /></p>




<p>选择硬盘
<img title="init3-4" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init3-4.png" width="600" height="440" /></p>




<p>默认没有安全组，直接下一步
<img title="init3-5" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init3-5.png" width="600" height="440" /></p>




<p>最后给Template命名，并点击"Launch VM"创建
<img title="init3-6" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init3-6.png" width="600" height="432" /></p>




<p>创建过程大概1分钟左右
<img title="init3-7" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init3-7.png" width="600" height="174" /></p>




<p>创建成功以后Instance状态为Running
<img title="init3-8" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init3-8.png" width="600" height="148" /></p>




<p>通过NICs页面可以查看到所绑定的IP地址
<img title="init3-9" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init3-9.png" width="600" height="470" /></p>




<p>点击Details页面的"View console"，打开本地终端界面
<img title="init3-10" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init3-10.png" width="600" height="248" /></p>




<p>可以看到操作系统的安装界面，接下来就是常见的系统安装过程了
<img title="init3-11" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init3-11.png" width="600" height="530" /></p>




<p><strong>10.2 通过View console执行操作系统的安装过程</strong>
通过在创建好的Instance的属性页面上点击 View console，即通过Web界面操作本地图形终端<br />
执行操作系统的安装过程，安装好操作系统。</p>




<p><strong>10.3 定制Template</strong>
操作系统安装完成以后，由于计划以该操作系统来制作Template，所以需要进行如下修改
<strong>10.3.1 安装openssh client和server (通过View console)</strong>
ubuntu@Template-Instance:~$ sudo apt-get install ssh</p>




<p>后面的步骤就可以通过SSH来完成了。</p>




<p><strong>10.3.2 配置国内的网易镜像源</strong>
ubuntu@Template-Instance:~$ sudo sed -i s/us.archive.ubuntu.com/mirrors.163.com/g /etc/apt/sources.list<br />
ubuntu@Template-Instance:~$ sudo sed -i s/security.ubuntu.com/mirrors.163.com/g /etc/apt/sources.list<br />
ubuntu@Template-Instance:~$ sudo apt-get update</p>




<p><strong>10.3.3 配置sudo用户组免密码切换</strong>
ubuntu@Template-Instance:~$ sudo visudo<br />
%sudo ALL=(ALL:ALL) NOPASSWD:ALL<br />
%admin ALL=(ALL) NOPASSWD:ALL</p>




<p><strong>10.3.4 安装常用工具</strong>
ubuntu@Template-Instance:~$ sudo apt-get install vim lrzsz</p>




<p><strong>10.3.5 去除主机名相关配置</strong>
这样做是为了后面利用该Template创建的Instance能够自动生成特有的主机名<br />
ubuntu@Template-Instance:~$ sudo vim /etc/hosts<br />
注释或删除以下内容<br />
#127.0.1.1 Template-Instance.cs1cloud.internal Template-Instance</p>




<p>将/etc/hostname文件更名或删除<br />
ubuntu@Template-Instance:~$ sudo mv /etc/hostname /etc/hostname.template</p>




<p><strong>10.3.6 关闭Instance</strong>
ubuntu@Template-Instance:~$ sudo sync<br />
ubuntu@Template-Instance:~$ sudo poweroff</p>




<p><strong>10.4 创建Template</strong>
确认Instance已经关闭，如下图所示
<img title="init3-12" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init3-12.png" width="600" height="194" /></p>




<p>然后卸下Instance上之前所挂载的ISO
<img title="init3-17" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init3-17.png" width="564" height="173" /></p>




<p>然后选择Instance对应的Volumes，点击Create Template
<img title="init3-14" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init3-14.png" width="600" height="280" /></p>




<p>Name: Ubuntu-10.10<br />
Description: Ubuntu Server 10.10 64-bit x86 with SSH<br />
OS Type: Ubuntu 10.10 (64-bit)<br />
Public: Yes<br />
Password Enabled: No<br />
Featured: No</p>




<p>init3-15.png</p>




<p>创建完成以后，即可以再Templates页面中查看到
<img title="init3-16" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init3-16.png" width="600" height="502" /></p>




<p><strong>11. 通过定制的Template创建VM Instance</strong>
通过刚刚创建好的Template，我们可以快速创建新的Instance</p>




<p>选择Template
<img title="init4-1" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init4-1.png" width="600" height="486" /></p>




<p>选择刚刚创建好的Template
<img title="init4-2" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init4-2.png" width="600" height="480" /></p>




<p>选择xLarge Instance，可以根据需要自己选择
<img title="init4-3" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init4-3.png" width="600" height="466" /></p>




<p>选择硬盘，由于之间创建的Template已经带有20G硬盘<br />
因此此处可以跳过，当然也可以选择硬盘，但会作为从盘附在上面
<img title="init4-4" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init4-4.png" width="600" height="476" /></p>




<p>默认没有安全组，直接下一步
<img title="init4-5" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init4-5.png" width="600" height="430" /></p>




<p>给Instance命名，并点击"Launch VM"创建
<img title="init4-6" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init4-6.png" width="600" height="480" /></p>




<p>创建成功以后Instance状态为Running
<img title="init4-7" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init4-7.png" width="600" height="172" /></p>




<p>通过NICs页面可以查看到所绑定的IP地址
<img title="init4-8" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init4-8.png" width="600" height="384" /></p>




<p>即可通过属性页面上查看到IP地址，直接登录SSH
<img title="init4-9" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init4-9.png" width="600" height="200" /></p>




<p><strong>12. 其它优化设置</strong>
CloudStack对已经删除的Instance设置了一个保护时间<br />
时间比较长，等于86400秒即24小时，我们可以将其设置的短一些<br />
如300秒，即五分钟<br />
在Global Settings中搜索expunge并设置，如下图所示
<img title="init5-1" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init5-1.png" width="600" height="260" /></p>




<p>然后重启Management Server使配置生效<br />
$ sudo /etc/init.d/cloud-management restart</p>




<p>修改Security Group安全组策略，允许所有数据通过
<img title="init2-5" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init2-5.png" width="600" height="396" /></p>




<p><img title="init2-6" alt="" src="http://heylinux.com/wp-content/uploads/2012/11/init2-6.png" width="600" height="390" /></p>




<p><strong>13. 结束语</strong>
目前，整个CloudStack的安装部署就已经完成了。<br />
但，这仅仅是一个开始，CloudStack的更多功能，比如<br />
1) 多节点分布式部署，将管理节点，Host节点，数据库，NFS存储区域都分开部署；<br />
2) 集成 Amazon EC2；<br />
3) VPC+VPN 网络实现；<br />
4) 多用户权限设计与资源分配等</p>




<p>都有待我们进一步的研究和学习。<br />
相信实际操作该文档之后，对CloudStack的架构与各个模块之间的联系都有了更深的理解，完成以上内容都不是什么难事了。</p>




<p></p>

]]></content>
  </entry>
  
</feed>
